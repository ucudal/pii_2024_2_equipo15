<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Battle">
            <summary>
            Esta clase representa una batalla entre dos jugadores.
            </summary>
        </member>
        <member name="P:Battle.Player1">
            <summary>
            Obtiene un valor que representa el primer jugador.
            </summary>
        </member>
        <member name="P:Battle.Player2">
            <summary>
            Obtiene un valor que representa al oponente.
            </summary>
        </member>
        <member name="M:Battle.#ctor(System.String,System.String)">
            <summary>
            Inicializa una instancia de la clase <see cref="T:Battle"/> con los
            valores recibidos como argumento.
            </summary>
            <param name="player1">El primer jugador.</param>
            <param name="player2">El oponente.</param>
        </member>
        <member name="T:BattlesList">
            <summary>
            Esta clase representa la lista de batallas en curso.
            </summary>
        </member>
        <member name="M:BattlesList.AddBattle(System.String,System.String)">
            <summary>
            Crea una nueva batalla entre dos jugadores.
            </summary>
            <param name="player1">El primer jugador.</param>
            <param name="player2">El oponente.</param>
            <returns>La batalla creada.</returns>
        </member>
        <member name="T:Facade">
            <summary>
            Esta clase recibe las acciones y devuelve los resultados que permiten
            implementar las historias de usuario. Otras clases que implementan el bot
            usan esta <see cref="T:Facade"/> pero no conocen el resto de las clases del
            dominio. Esta clase es un singleton.
            </summary>
        </member>
        <member name="P:Facade.Instance">
            <summary>
            Obtiene la única instancia de la clase <see cref="T:Facade"/>.
            </summary>
        </member>
        <member name="M:Facade.Reset">
            <summary>
            Inicializa este singleton. Es necesario solo en los tests.
            </summary>
        </member>
        <member name="M:Facade.AddTrainerToWaitingList(System.String)">
            <summary>
            Agrega un jugador a la lista de espera.
            </summary>
            <param name="displayName">El nombre del jugador.</param>
            <returns>Un mensaje con el resultado.</returns>
        </member>
        <member name="M:Facade.RemoveTrainerFromWaitingList(System.String)">
            <summary>
            Remueve un jugador de la lista de espera.
            </summary>
            <param name="displayName">El jugador a remover.</param>
            <returns>Un mensaje con el resultado.</returns>
        </member>
        <member name="M:Facade.GetAllTrainersWaiting">
            <summary>
            Obtiene la lista de jugadores esperando.
            </summary>
            <returns>Un mensaje con el resultado.</returns>
        </member>
        <member name="M:Facade.TrainerIsWaiting(System.String)">
            <summary>
            Determina si un jugador está esperando para jugar.
            </summary>
            <param name="displayName">El jugador.</param>
            <returns>Un mensaje con el resultado.</returns>
        </member>
        <member name="M:Facade.StartBattle(System.String,System.String)">
            <summary>
            Crea una batalla entre dos jugadores.
            </summary>
            <param name="playerDisplayName">El primer jugador.</param>
            <param name="opponentDisplayName">El oponente.</param>
            <returns>Un mensaje con el resultado.</returns>
        </member>
        <member name="T:Trainer">
            <summary>
            Esta clase representa un jugador en el juego Pokémon.
            </summary>
        </member>
        <member name="P:Trainer.DisplayName">
            <summary>
            El nombre de usuario de Discord en el servidor del bot del jugador.
            </summary>
        </member>
        <member name="M:Trainer.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Trainer"/> con el
            nombre de usuario de Discord que se recibe como argumento.
            </summary>
            <param name="displayName">El nombre de usuario de Discord.</param>
        </member>
        <member name="T:WaitingList">
            <summary>
            Esta clase representa la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="M:WaitingList.AddTrainer(System.String)">
            <summary>
            Agrega un jugador a la lista de espera.
            </summary>
            <param name="displayName">El nombre de usuario de Discord en el servidor
            del bot a agregar.
            </param>
            <returns><c>true</c> si se agrega el usuario; <c>false</c> en caso
            contrario.</returns>
        </member>
        <member name="M:WaitingList.RemoveTrainer(System.String)">
            <summary>
            Remueve un jugador de la lista de espera.
            </summary>
            <param name="displayName">El nombre de usuario de Discord en el servidor
            del bot a remover.
            </param>
            <returns><c>true</c> si se remueve el usuario; <c>false</c> en caso
            contrario.</returns>
        </member>
        <member name="M:WaitingList.FindTrainerByDisplayName(System.String)">
            <summary>
            Busca un jugador por el nombre de usuario de Discord en el servidor del
            bot.
            </summary>
            <param name="displayName">El nombre de usuario de Discord en el servidor
            del bot a buscar.
            </param>
            <returns>El jugador encontrado o <c>null</c> en caso contrario.
            </returns>
        </member>
        <member name="M:WaitingList.GetAnyoneWaiting">
            <summary>
            Retorna un jugador cualquiera esperando para jugar. En esta
            implementación provista no es cualquiera, sino el primero. En la
            implementación definitiva, debería ser uno aleatorio.
            
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
